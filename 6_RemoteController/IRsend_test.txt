class irControlNecFormat {
  public:
    // constructor
    irControlNecFormat(byte ledPin, byte custom0, byte custom1);
    void sendCommand(byte data);
  private:
    byte _ledPin;   // the pin number which the LED is connected
    byte _custom0;  // custom code 
    byte _custom1;  // custom code
     
    void sendData(byte date);
    void on(int num);
};
 
irControlNecFormat::irControlNecFormat(byte ledPin, byte custom0, byte custom1) {
  _ledPin = 1 << ledPin;
  _custom0 = custom0;
  _custom1 = custom1;
   
  pinMode(ledPin, OUTPUT);  // set the ledPin as an OUTPUT
}
 
void irControlNecFormat::sendCommand(byte data){
  on(346);                  // leader code(ON)
  delayMicroseconds(4500);  // leader code(OFF)
   
  sendData(_custom0);       // custom code
  sendData(_custom1);       // custom code
   
  sendData(data);           // data
  sendData(~data);          // ~data
   
  on(22);                   // stop bit
}
 
void irControlNecFormat::sendData(byte data) {
  for(int i = 0; i < 8; i++) {
    on(22);
    switch(data & 1) {
    case 0:
      delayMicroseconds(565);
      break;
    case 1:
      delayMicroseconds(1690);
      break;
    }
    data = data >> 1;
  }
}
 
void irControlNecFormat::on(int num) {
  for(int i = 0; i < num; i++) {
    PORTD |= _ledPin;
    delayMicroseconds(9);
    PORTD &= ~_ledPin;
    delayMicroseconds(17);
  }
}
 
// Connect an LED to the No.3 pin.
// Custom code: 0x00 0xbf
irControlNecFormat controller(3, 0x00, 0xbf);
 
void setup() {
}
 
void loop() {
  int inPin = 7;
  int statu =0;

  statu = digitalRead(inPin); 
  Serial.print(statu);
  
  if(statu == HIGH){
  controller.sendCommand(0x1e);
  delay(5000);
  }
  
  delay(2000);
}